<template>
  <global-view bgColor="#F7F9FA">
    <z-paging
      ref="pagePagingRef"
      nvue-list-id="z-paging-nlist"
      refresher-only
      hide-nvue-bottom-tag
      @on-refresh="onRefresh"
    >
      <!-- 这个cell包含了吸顶view和主体列表，其高度必须等于页面可见高度 -->
      <template #top>
        <view ref="headerRef" style="padding-top: 50rpx">
          <view class="view-container">
            <view class="search">
              <search
                :searchBoxStyle="{ padding: '24rpx 0' }"
                :searchVal="ordersData.keyword"
                :disabled="false"
                @search="handleSearch"
              />
            </view>
            <view class="tabs">
              <z-tabs
                ref="tabsRef"
                barWidth="56rpx"
                barHeight="8rpx"
                bg-color="#F7F9FA"
                :list="tabColumns"
                :current="current"
                :inactiveStyle="inactiveStyle"
                :tabsStyle="tabsStyle"
                :activeStyle="activeStyle"
                :barStyle="barStyle"
                @change="tabsChange"
              />
            </view>
            <view v-if="false" class="dropdown">
              <fy-dropdown
                :menuList="menuList"
                background-color="#F7F9FA"
                backgroundBoxColor="#F7F9FA"
                @change="onSortConfirm"
              />
            </view>
          </view>
        </view>
      </template>
      <cell>
        <view class="paging-content" :style="{ height: pageHeight + 'px' }">
          <!-- 吸顶view -->
          <!-- 注意！此处的z-tabs为独立的组件，可替换为第三方的tabs，若需要使用z-tabs，请在插件市场搜索z-tabs并引入，否则会报插件找不到的错误 -->

          <!-- swiper -->
          <swiper
            class="swiper"
            :current="current"
            @change="swiperChange"
            @transition="swiperTransition"
            @animationfinish="swiperAnimationfinish"
          >
            <swiper-item
              v-for="(item, index) in tabColumns"
              :key="index"
              class="swiper-item"
            >
              <sticky-swiper-item
                v-slot="{ data, num }"
                :ref="(el) => (swiperItems[index] = el)"
                :tabIndex="index"
                :currentIndex="current"
                :queryApi="queryApi"
                :queryParams="queryParams"
                :showEmptyReload="true"
                emptyImg="/static/images/empty/icon_order.png"
                emptyText="暂无订单数据"
                path="list"
                pageSizeName="per_page"
                @on-empty-reload-click="handleEmptyReloadClick"
              >
                <view class="goods-box">
                  <view class="goods" style="padding-bottom: 20rpx">
                    <order-status-item :order="data" @finish="onRefresh" />
                    <goods-item
                      type="order"
                      :row="true"
                      :product="data.product"
                      :bargain="data.order_bargain_resp"
                      :actualAmount="data.actual_amount"
                    />
                  </view>
                </view>
              </sticky-swiper-item>
            </swiper-item>
          </swiper>
        </view>
      </cell>
    </z-paging>
  </global-view>
</template>

<script setup lang="ts">
import { ref, watch, computed, nextTick } from "vue";
import { onLoad, onShow, onUnload, onHide } from "@dcloudio/uni-app";
import GlobalView from "@/components/global-view/index.vue";
import Search from "@/components/search/index.vue";
import StickySwiperItem from "@/components/sticky-swiper-item/index.vue";
import GoodsItem from "@/components/goods-item/index.vue";
import OrderBtnItem from "@/pages/order/components/order-btn-item.vue";
import OrderStatusItem from "@/pages/order/components/order-status-item.vue";
import { OrderStatus, OrderType } from "@/enums/order";
import { getOrderList } from "@/api/order";
import { FilterList } from "@/pages/order/js/filter-list";
import { TabsSwiper } from "@/utils/tabs-swiper";
import {
  tabsStyle,
  inactiveStyle,
  activeStyle,
  barStyle,
} from "@/utils/operation-style";
import {OrderEvents} from "./orderEnum.ts";

const { ordersData, menuList, onSortConfirm } = FilterList();

const {
  headerRef,
  tabsRef,
  pagePagingRef,
  swiperItems,
  pageHeight,
  current,
  tabsChange,
  swiperAnimationfinish,
  swiperTransition,
  swiperChange,
  getPageHeight,
  onRefresh,
  onReload,
} = TabsSwiper();

const queryApi = ref(getOrderList);
const payRefs = ref([]);
const payIndex = ref(0);

const tabColumns = ref([
  { name: "全部", value: null },
  { name: "待付款", value: [OrderStatus.UNPAID] },
  { name: "待发货", value: [OrderStatus.WAIT_SEND, OrderStatus.PAID] },
  {
    name: "已成交",
    value: [
      OrderStatus.WAIT_RECEIVE,
      OrderStatus.SENDING,
      OrderStatus.FINISHED,
    ],
  },
  { name: "取消", value: [OrderStatus.CLOSED] },
  {
    name: "退款/售后",
    value: [
      OrderStatus.AFTER_SALE_COMPLETED,
      OrderStatus.AFTER_SALE_REJECTED,
      OrderStatus.AFTER_SALE_REQUESTED,
      OrderStatus.REFUND_COMPLETED,
      OrderStatus.REFUND_REJECTED,
      OrderStatus.REFUND_REQUESTED,
      OrderStatus.AFTER_SALE_PROCESSING,
    ],
  },
]);

const queryParams = computed(() => {
  return {
    per_page: 10,
    order_status: tabColumns.value[current.value].value,
    orders: ordersData.orders,
    keyword: ordersData.keyword,
    order_types: [
      OrderType.NORMAL,
      OrderType.GUARANTEE,
      OrderType.RECYCLING,
      OrderType.SECKILL,
    ],
  };
});
const handleChangePayIndex = (i: number) => {
  payIndex.value = i;
};

const handleDetail = (data) => {
  uni.navigateTo({
    url: `/pages/order/detail?orderId=${data.order_id}`,
  });
};

const handleSearch = (keyword: string) => {
  uni.log.info("handleSearch", keyword);
  ordersData.keyword = keyword;
  onRefresh();
};

const handleEmptyReloadClick = (e) => {
  // 禁止默认事件，默认刷新列表
  e(false);
  uni.switchTab({ url: "/pages/buy-account/index" });
};

onLoad((options) => {
  current.value = +options.status || 0;
  nextTick(() => {
    getPageHeight();
  });

  uni.$on(OrderEvents.REFRESH_PAGE,(param)=>{
    current.value =param.status
  })
});



onShow(() => {
  payRefs.value[payIndex.value]?.checkH5PayStatus();
});

onUnload(() => {
  payRefs.value[payIndex.value]?.closeWebview();
  payRefs.value[payIndex.value]?.clearCheckPayStatus();
  uni.$off(OrderEvents.REFRESH_PAGE)
});

onHide(() => {
  // payRefs.value[payIndex.value]?.closeWebview();
  // payRefs.value[payIndex.value]?.clearCheckPayStatus();
});

// 设置子组件嵌套list父容器支持swiper-list吸顶滚动效果的方法
const setListSpecialEffects = () => {
  nextTick(() => {
    swiperItems.value[current.value].setSpecialEffects(0);
  });
};

watch(
  () => current.value,
  () => {
    setListSpecialEffects();
  },
  { immediate: true, deep: true }
);

watch(
  () => tabColumns.value,
  () => {
    onReload();
  },
  { immediate: true }
);
</script>

<style lang="scss" scoped>
.popup {
  flex: 1;
  @include flex(column);
  /* max-height: max-content; */
  .content {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 32rpx;
    .text {
      color: #1a1a1a;
      font-size: 32rpx;
      font-weight: 400;
    }
  }
}
.swiper,
.swiper-item,
.swiper-item-content {
  flex: 1;
}

.paging-content {
  flex: 1;
  display: flex;
  justify-content: center;

  .goods-box {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 24rpx;
    .goods {
      width: 702rpx;
      background-color: #fff;
      border-radius: 4rpx;
      padding: 24rpx;
      padding-bottom: 0;
      // box-sizing: border-box;
    }
  }
}
.order-btn-box {
  @include flex(row);
  padding: 24rpx 0;
  // box-sizing: border-box;
  justify-content: flex-end;
  align-items: center;
}

.view-container {
  @include flex(column);
  align-items: center;
  background-color: #f7f9fa;
  .search {
    width: 702rpx;
  }
  .tab-right {
    width: 60rpx;
    display: flex;
    justify-content: center;
    align-items: center;
    &.active {
      transform: rotate(180deg);
    }
  }
  .dropdown {
    width: 100%;
    background-color: #fff;
    display: flex;
    flex-direction: row;
    z-index: 9999;
  }
}

::v-deep .goods-box .u-count-down .u-count-down__text {
  color: #f42a2a !important;
  font-size: 28rpx !important;
  font-weight: 400 !important;
}

::v-deep .popup-content .u-textarea {
  background-color: transparent !important;
}

::v-deep .popup-content .u-textarea__count {
  background-color: transparent !important;
}
</style>
