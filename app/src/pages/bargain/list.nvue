<template>
  <global-view bgColor="#F7F9FA">
    <z-paging
      ref="pagePagingRef"
      nvue-list-id="z-paging-nlist"
      refresher-only
      hide-nvue-bottom-tag
      @on-refresh="onRefresh"
    >
      <!-- 这个cell包含了吸顶view和主体列表，其高度必须等于页面可见高度 -->
      <template #top>
        <view ref="headerRef">
          <u-navbar
            bgColor="#ffffff"
            :title="pageTitle"
            :placeholder="true"
            :autoBack="true"
            :safeAreaInsetTop="true"
          >
            <template #right>
              <view class="i-right" @click="resetMessage">
                <text class="title">清除提示</text>
                <u--image
                  src="/static/images/im/list/5.png"
                  width="48rpx"
                  height="48rpx"
                />
              </view>
            </template>
          </u-navbar>
          <view class="view-container">
            <view class="search">
              <search
                :searchBoxStyle="{ padding: '24rpx 0' }"
                :disabled="false"
                @search="handleSearch"
              />
            </view>
            <z-tabs
              ref="tabsRef"
              barWidth="56rpx"
              barHeight="8rpx"
              :list="tabColumns"
              :current="current"
              :inactiveStyle="inactiveStyle"
              :tabsStyle="tabsStyle"
              :activeStyle="activeStyle"
              :barStyle="barStyle"
              @change="tabsChange"
            />
          </view>
        </view>
      </template>
      <cell>
        <view class="paging-content" :style="'height:' + pageHeight + 'px'">
          <!-- 吸顶view -->
          <!-- 注意！此处的z-tabs为独立的组件，可替换为第三方的tabs，若需要使用z-tabs，请在插件市场搜索z-tabs并引入，否则会报插件找不到的错误 -->

          <!-- swiper -->
          <swiper
            class="swiper"
            :current="current"
            @change="swiperChange"
            @transition="swiperTransition"
            @animationfinish="swiperAnimationfinish"
          >
            <swiper-item
              v-for="(item, index) in tabColumns"
              :key="index"
              class="swiper-item"
            >
              <sticky-swiper-item
                v-slot="data"
                :ref="(el) => (swiperItems[index] = el)"
                :tabIndex="index"
                :currentIndex="current"
                :queryApi="queryApi"
                :queryParams="queryParams"
                path="list"
                pageSizeName="per_page"
              >
                <bargain-item
                  :bargainRef="bargainRef"
                  :createOrderRef="createOrderRef"
                  :closeBargainRef="closeBargainRef"
                  :purchasePopupRef="purchasePopupRef"
                  :bidder="bargainData.bidder"
                  :bargainData="data.data"
                  :headerHeight="headerHeight"
                  :bargainHistoryRef="bargainHistoryRef"
                  @on-detail="handleDetail(data.data)"
                  @on-operation="handleOpe(data.data)"
                  @reload="handleReload"
                />
              </sticky-swiper-item>
            </swiper-item>
          </swiper>
        </view>
      </cell>
      <!-- </view> -->
    </z-paging>
    <bargain-popup
      ref="bargainRef"
      :bargainParam="bargainParam"
      :product="bargainParam.product"
      @reload="handleReload"
    />
    <create-order-popup ref="createOrderRef" title="创建订单提示">
      <view class="create-popup">
        <view class="create-popup-content">
          <text class="text">{{ createOrderTips }}</text>
        </view>
        <view class="btn-box">
          <view class="btn cancel" @tap="createOrderRef.close()">
            <text class="text">取消</text>
          </view>
          <view class="btn confirm" @tap="handleCreateOrder">
            <text class="text"
              >{{ bargainData.bidder === "buyer" ? "确认并购买" : "确认" }}
            </text>
          </view>
        </view>
      </view>
    </create-order-popup>

    <close-bargain-popup ref="closeBargainRef" title="拒绝议价">
      <view class="create-popup">
        <view class="create-popup-content">
          <text class="text">确认要拒绝本次议价吗？</text>
        </view>
        <view class="btn-box">
          <view class="btn cancel" @tap="closeBargainRef.close()">
            <text class="text">取消</text>
          </view>
          <view class="btn confirm" @tap="handleCloseBargain">
            <text class="text">确认</text>
          </view>
        </view>
      </view>
    </close-bargain-popup>
    <purchase-popup ref="purchasePopupRef" />
    <bargain-history ref="bargainHistoryRef" />
    <bargain-message ref="bargainMessageRef" />
  </global-view>
</template>
<script setup>
import { ref, reactive, watch, computed, nextTick } from "vue";
import { onLoad } from "@dcloudio/uni-app";
import { useUserStore } from "@/stores/user";
import GlobalView from "@/components/global-view/index.vue";
import Search from "@/components/search/index.vue";
import StickySwiperItem from "@/components/sticky-swiper-item/index.vue";
import BargainItem from "./components/bargain-item.vue";
import BargainPopup from "./components/bargain-popup.vue";
import CreateOrderPopup from "@/components/my-popup/index.vue";
import CloseBargainPopup from "@/components/my-popup/index.vue";
import PurchasePopup from "@/pages/goods/components/purchase-popup.vue";
import { BargainStatus } from "@/enums/order";
import { orderBargainList, getOrderPurchasePreview } from "@/api/order";
import { Bargain } from "./js/bargain";
import { TabsSwiper } from "@/utils/tabs-swiper";
import {
  tabsStyle,
  inactiveStyle,
  activeStyle,
  barStyle,
} from "@/utils/operation-style";
import BargainHistory from "@/pages/bargain/components/bargain-history.vue";
import BargainMessage from "@/pages/bargain/components/bargain-message.vue";
import { BargainUnReadEnums } from "@/enums/common";

const placeholderStyle = reactive({
  fontSize: "24rpx",
  color: "#AFAFAF",
});

const bargainRef = ref(null);
const createOrderRef = ref(null);
const closeBargainRef = ref(null);
const purchasePopupRef = ref(null);
const bargainParam = ref({});
const reason = ref("");
const handleOpe = (data) => {
  bargainParam.value = data;
};
const userStore = useUserStore();
const { userInfo, getMyInfoV2 } = userStore;

const {
  tabsRef,
  headerRef,
  pagePagingRef,
  swiperItems,
  pageHeight,
  headerHeight,
  current,
  // scrollable,
  // setScrollable,
  // scroll,
  tabsChange,
  swiperAnimationfinish,
  swiperTransition,
  swiperChange,
  getPageHeight,
  onRefresh,
  onReload,
} = TabsSwiper();

const { bargainData, fetchHandleOrderBargain } = Bargain();

const queryApi = ref(orderBargainList);

const pageTitle = computed(() => {
  if (bargainData.bidder === "seller") {
    return "收到的求降价"; // 卖家
  } else {
    return "发出的求降价"; // 买家
  }
});

const createOrderTips = computed(() => {
  if (bargainData.bidder === "seller") {
    return `确定要以${bargainParam.value.price}元的价格，将这个账号卖出吗？`; // 卖家
  } else {
    return `确定要以${bargainParam.value.price}元的价格，将这个账号买入吗？`; // 买家
  }
});

const tabColumns = computed(() => {
  //
  if (bargainData.bidder === "seller") {
    return [
      { name: "全部", value: null },
      {
        name: "待处理",
        value: [BargainStatus.WAIT_SELLER, BargainStatus.WAIT_BUYER].toString(),
        badge: { count: userStore.bargainSellerUnread },
      },
      {
        name: "已失效",
        value: [BargainStatus.LAPSE, BargainStatus.SELLER_REFUSE].toString(),
      },
      {
        name: "已同意",
        value: [
          BargainStatus.SELLER_AGREE,
          BargainStatus.BUY_AGREE,
          BargainStatus.FINISH,
        ].toString(),
      },
    ];
  } else {
    return [
      { name: "全部", value: null },
      {
        name: "待处理",
        value: [BargainStatus.WAIT_BUYER, BargainStatus.WAIT_SELLER].toString(),
        badge: { count: userStore.bargainBuyerUnread },
      },
      {
        name: "已失效",
        value: [BargainStatus.LAPSE, BargainStatus.SELLER_REFUSE].toString(),
      },
      {
        name: "已同意",
        value: [
          BargainStatus.SELLER_AGREE,
          BargainStatus.BUY_AGREE,
          BargainStatus.FINISH,
        ].toString(),
      },
    ];
  }
});

const searchKey = ref(null);
const bargainHistoryRef = ref(null);
const bargainMessageRef = ref(null);

const queryParams = computed(() => {
  const bargain_status = tabColumns.value[current.value].value
    ? [...tabColumns.value[current.value].value.split(",")]
    : null;
  return {
    per_page: 10,
    bargain_status,
    bidder: bargainData.bidder,
    product_title: searchKey.value,
  };
});

const handleSearch = (search) => {
  searchKey.value = search;
  onReload();
};

const handleCloseBargain = async () => {
  const { bargain_no, bid_history } = bargainParam.value;
  const data = await fetchHandleOrderBargain({
    uid: userInfo.uid,
    bargain_no,
    bargain_record_id: bid_history.now_record.id,
    status: false,
    reason: reason.value,
  });
  if (data) {
    uni.$main.toast("已拒绝");
    closeBargainRef.value.close();
    handleReload(2);
  }
};

const handleCreateOrder = async () => {
  const { bargain_no, bid_history, product } = bargainParam.value;
  const data = await fetchHandleOrderBargain({
    uid: userInfo.uid,
    bargain_no,
    bargain_record_id: bid_history.now_record.id,
    status: true,
  });
  if (data) {
    createOrderRef.value.close();
    onReload();
    setTimeout(async () => {
      current.value = tabColumns.value.length - 1;
      if (bargainData.bidder === "buyer") {
        await getOrderPurchasePreview({
          product_id: product.product_id,
        }).then(() => {
          uni.navigateTo({
            url: `/pages/goods/front-buy?product_id=${product.product_id}`,
          });
        });
      }
    }, 300);
  }
};
const resetMessage = () => {
  const bargainMessageType =
    bargainData.bidder === "seller"
      ? BargainUnReadEnums.BARGAIN_WAIT_SELLER
      : BargainUnReadEnums.BARGAIN_WAIT_BUYER;
  const currentCount =
    bargainData.bidder === "seller"
      ? userStore.bargainSellerUnread
      : userStore.bargainBuyerUnread;
  if (currentCount > 0) {
    bargainMessageRef.value?.open([bargainMessageType]);
  } else {
    uni.$u.toast("当前无新消息提示，无需清除");
  }
};

const handleReload = (index = 1) => {
  onReload();
  setTimeout(() => {
    userStore.getMyInfoV2({
      order_bargain_resp: true,
      order_unread_resp: true,
    });
    current.value = index;
  }, 300);
};

const handleConfirm = () => {
  purchasePopupRef.value.close();
  uni.navigateTo({
    url: "/pages/order/list",
  });
};

const handleDetail = () => {
  // uni.navigateTo({
  //   url: `/pages/bargain/detail?bargainNo=${data.bargain_no}`,
  // });
};

onLoad((options) => {
  if (options.bidder) {
    bargainData.bidder = options.bidder;
  }

  if (options.bidder && options.bargainStatus) {
    switch (options.bargainStatus) {
      case BargainStatus.WAIT_SELLER:
      case BargainStatus.WAIT_BUYER:
        current.value = 1;
        break;
      case BargainStatus.LAPSE:
        current.value = 2;
        break;
      case BargainStatus.SELLER_AGREE:
      case BargainStatus.BUY_AGREE:
      case BargainStatus.FINISH:
        current.value = 3;
        break;
      default:
    }
  }
  nextTick(() => {
    getPageHeight();
  });
  userInfo?.uid &&
    getMyInfoV2({ order_bargain_resp: true, order_unread_resp: true });
});

// 设置子组件嵌套list父容器支持swiper-list吸顶滚动效果的方法
const setListSpecialEffects = () => {
  nextTick(() => {
    swiperItems.value[current.value].setSpecialEffects();
  });
};

watch(
  () => current.value,
  () => {
    setListSpecialEffects();
  },
  { immediate: true, deep: true }
);

watch(
  () => userStore.bargainSellerUnread,
  () => {
    onReload();
  }
);
watch(
  () => userStore.bargainBuyerUnread,
  () => {
    onReload();
  }
);
</script>

<style lang="scss" scoped>
.swiper,
.swiper-item,
.swiper-item-content {
  flex: 1;
}
.close-popup {
  flex: 1;
  .value-textarea-position {
    position: relative;
    flex: 1;

    .value-textarea {
      display: flex;
      margin-top: 16rpx;
      height: 144rpx;
      padding: 24rpx;
      flex: 1;
      font-weight: 400;
      font-size: 24rpx;
      color: #1a1a1a;
      line-height: 50rpx;
      background-color: #f4f5f6;
      border-radius: 4rpx;
    }

    .textarea-word {
      position: absolute;
      right: 16rpx;
      bottom: 16rpx;
      background-color: #f4f5f6;
      .text {
        font-weight: 400;
        font-size: 24rpx;
        color: #afafaf;
      }
    }
  }
  .submit-box {
    width: 686rpx;
    height: 96rpx;
    background-color: #1cc7be;
    border-radius: 8rpx;
    opacity: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 40rpx;
    &.active {
      opacity: 1;
    }
    .text {
      font-weight: 500;
      font-size: 32rpx;
      color: #ffffff;
    }
  }
}
.create-popup {
  flex: 1;
  @include flex(column);
  /* max-height: max-content; */
  .create-popup-content {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    .text {
      color: #1a1a1a;
      font-size: 28rpx;
      font-weight: 400;
    }
  }
  .btn-box {
    @include flex(row);
    justify-content: space-between;
    margin-top: 24rpx;
    .btn {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 236rpx;
      height: 68rpx;
      border-radius: $app-box-radius;
      .text {
        font-weight: 500;
        font-size: 28rpx;
        color: #ffffff;
      }
      &.cancel {
        background-color: #f4f5f6;
        .text {
          color: #606060;
        }
      }
      &.confirm {
        background-color: #1cc7be;
      }
    }
  }
}
.swiper {
  flex: 1;
}
.content {
  height: 100%;
  .paging-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    .goods-box {
      flex: 1;
      display: flex;
      justify-content: center;
      align-items: center;
      .goods {
        width: 702rpx;
        background-color: #fff;
        border-radius: 4rpx;
        margin-bottom: 24rpx;
        padding: 24rpx;
        padding-bottom: 0;
        .price-box {
          flex: 1;
          @include flex(row);
          align-items: center;
          justify-content: space-between;
          .price-text {
            @include flex(row);
            align-items: center;
            .text {
              font-weight: 400;
              font-size: 18rpx;
              border: 2rpx solid #f4f5f6;
              padding: 2rpx 12rpx;
            }
            &.original-price {
              .text {
                color: $app-main-color;
              }
            }
            &.bargain-price {
              .text {
                color: #f42a2a;
              }
            }
          }
        }
      }
    }
  }
}

.view-container {
  @include flex(column);
  align-items: center;
  background-color: #fff;
  :deep(.u-count-down .u-count-down__text) {
    color: #f42a2a !important;
    font-size: 28rpx !important;
  }
  .search {
    width: 702rpx;
  }
  .tab-right {
    width: 60rpx;
    display: flex;
    justify-content: center;
    align-items: center;
    &.active {
      transform: rotate(180deg);
    }
  }
  .dropdown {
    width: 100%;
    background-color: #fff;
    display: flex;
    flex-direction: row;
    z-index: 9999;
  }
}

::v-deep .goods-box .u-count-down .u-count-down__text {
  color: #fff !important;
  font-size: 22rpx !important;
}
.i-right {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: center;
  .title {
    font-weight: 400;
    font-size: 28rpx;
    color: #1a1a1a;
    margin: 0rpx 10rpx;
  }
}
</style>
